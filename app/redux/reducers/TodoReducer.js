import { createSlice } from "@reduxjs/toolkit";

// Initial State
const initialState = {
  active: {
    todos: [],
  },
  completed: {
    todos: [],
  },
};

// Create the todos slice
const todosSlice = createSlice({
  name: "todos",
  initialState,
  reducers: {
    // Create a new todo
    addTodo: (state, action) => {
      const { title, description, status } = action.payload;
      const newTodo = {
        id: Date.now(), // Generate a unique ID
        title,
        description,
        status,
      };

      // Add to the correct list based on the status
      if (status === "Completed") {
        state.completed.todos.unshift(newTodo);
      } else {
        state.active.todos.unshift(newTodo);
      }
    },

    // Edit an existing todo
    editTodo: (state, action) => {
      const { id, title, description, status } = action.payload;

      // Find in active todos
      let todo = state.active.todos.find((todo) => todo.id === id);
      if (!todo) {
        // Find in completed todos if not in active
        todo = state.completed.todos.find((todo) => todo.id === id);
      }

      // Update todo fields
      if (todo) {
        todo.title = title;
        todo.description = description;
        todo.status = status;

        // If status changed, move between active and completed
        if (
          status === "Completed" &&
          state.active.todos.some((todo) => todo.id === id)
        ) {
          state.active.todos = state.active.todos.filter(
            (todo) => todo.id !== id
          );
          state.completed.todos.unshift(todo);
        } else if (
          status === "On-Going" &&
          state.completed.todos.some((todo) => todo.id === id)
        ) {
          state.completed.todos = state.completed.todos.filter(
            (todo) => todo.id !== id
          );
          state.active.todos.unshift(todo);
        }
      }
    },

    // Delete a todo
    deleteTodo: (state, action) => {
      const { id } = action.payload;
      // Remove from active todos
      state.active.todos = state.active.todos.filter((todo) => todo.id !== id);
      // Remove from completed todos
      state.completed.todos = state.completed.todos.filter(
        (todo) => todo.id !== id
      );
    },

    // Mark a todo as completed
    completeTodo: (state, action) => {
      const { id } = action.payload;

      // Find the todo in active list
      const todo = state.active.todos.find((todo) => todo.id === id);
      if (todo) {
        todo.status = "Completed";

        // Move to completed todos list
        state.active.todos = state.active.todos.filter(
          (todo) => todo.id !== id
        );
        state.completed.todos.unshift(todo);
      }
    },
  },
});

// Export actions generated by createSlice
export const { addTodo, editTodo, deleteTodo, completeTodo } =
  todosSlice.actions;

// Export the reducer
export default todosSlice.reducer;
