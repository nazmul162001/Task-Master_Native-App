import { createSlice } from "@reduxjs/toolkit";

// Initial State
const initialState = {
  active: {
    todos: [],
  },
  completed: {
    todos: [],
  },
};

// Create the todos slice
const todosSlice = createSlice({
  name: "todos",
  initialState,
  reducers: {
    // Create a new todo
    addTodo: (state, action) => {
      const { title, description, status } = action.payload;
      const newTodo = {
        id: Date.now(), // Generate a unique ID
        title,
        description,
        status,
      };

      // Add to the correct list based on the status
      if (status === "Completed") {
        state.completed.todos.unshift(newTodo);
      } else {
        state.active.todos.unshift(newTodo);
      }
    },

    editTodo: (state, action) => {
      const { id, title, description, status } = action.payload;

      // Convert the id to a number to match the stored id format
      const todoId = Number(id);

      // Find the todo in active.todos
      const activeTodoIndex = state.active.todos.findIndex(
        (todo) => todo.id === todoId
      );
      // Find the todo in completed.todos
      const completedTodoIndex = state.completed.todos.findIndex(
        (todo) => todo.id === todoId
      );

      let updatedTodo = null; // Initialize updatedTodo

      // Check if the todo is in the active list
      if (activeTodoIndex !== -1) {
        updatedTodo = {
          ...state.active.todos[activeTodoIndex],
          title,
          description,
          status,
        };

        // If the status changes to Completed, move it to the completed list
        if (status === "Completed") {
          state.active.todos.splice(activeTodoIndex, 1); // Remove from active list
          state.completed.todos.unshift(updatedTodo); // Add to completed list
        } else {
          // Otherwise, update in place in the active list
          state.active.todos[activeTodoIndex] = updatedTodo;
        }
      }
      // Check if the todo is in the completed list
      else if (completedTodoIndex !== -1) {
        updatedTodo = {
          ...state.completed.todos[completedTodoIndex],
          title,
          description,
          status,
        };

        // If the status changes to On-Going, move it to the active list
        if (status === "On-Going") {
          state.completed.todos.splice(completedTodoIndex, 1); // Remove from completed list
          state.active.todos.unshift(updatedTodo); // Add to active list
        } else {
          // Otherwise, update in place in the completed list
          state.completed.todos[completedTodoIndex] = updatedTodo;
        }
      }
    },

    // Delete a todo
    deleteTodo: (state, action) => {
      const { id } = action.payload;
      // Remove from active todos
      state.active.todos = state.active.todos.filter((todo) => todo.id !== id);
      // Remove from completed todos
      state.completed.todos = state.completed.todos.filter(
        (todo) => todo.id !== id
      );
    },

    // Toggle the todo between Completed and On-Going
    completeTodo: (state, action) => {
      const { id } = action.payload;

      // Check if the todo is in active list
      let todo = state.active.todos.find((todo) => todo.id === id);

      // If the todo is active, mark it as Completed
      if (todo) {
        todo.status = "Completed";
        state.active.todos = state.active.todos.filter(
          (todo) => todo.id !== id
        );
        state.completed.todos.unshift(todo);
      } else {
        // If the todo is in the completed list, mark it as On-Going
        todo = state.completed.todos.find((todo) => todo.id === id);
        if (todo) {
          todo.status = "On-Going";
          state.completed.todos = state.completed.todos.filter(
            (todo) => todo.id !== id
          );
          state.active.todos.unshift(todo);
        }
      }
    },
  },
});

// Export actions generated by createSlice
export const { addTodo, editTodo, deleteTodo, completeTodo } =
  todosSlice.actions;

// Export the reducer
export default todosSlice.reducer;
